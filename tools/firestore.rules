rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper: Is the user signed in?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper: Get the UID of the user making the request.
    function requesterUid() {
      return request.auth.uid;
    }

    // Match the specific structure used by the application
    // IMPORTANT: Ensure your application code uses this exact path structure.
    match /artifacts/{appId}/checklists/{checklistId} {
      
      // Helper: Get data for the specific checklist being accessed (used by get, update, delete)
      function getChecklistData() {
        return get(/databases/$(database)/documents/artifacts/$(appId)/checklists/$(checklistId)).data;
      }
      // Helper: Check membership based on fetched data
      function isMemberFromData(data) {
         return isAuthenticated() && data != null && 'members' in data && requesterUid() in data.members;
      }
      // Helper: Check ownership based on fetched data
      function isOwnerFromData(data) {
        return isMemberFromData(data) && data.members[requesterUid()] == 'owner';
      }
      // Helper: Check editor/owner based on fetched data
      function isEditorOrOwnerFromData(data) {
         return isMemberFromData(data) && (data.members[requesterUid()] == 'owner' || data.members[requesterUid()] == 'editor');
      }

      // READ (Single Doc): Allow if the user is found in the members map of the fetched document data.
      allow get: if isMemberFromData(getChecklistData());

      // LIST (Query): Allow if authenticated AND the query correctly filters by the user's ID in 'memberIds'.
      allow list: if isAuthenticated()
                  && request.query.where.size() == 1
                  && request.query.where[0].fieldPath == 'memberIds'
                  && request.query.where[0].op == 'array-contains'
                  && request.query.where[0].value == requesterUid();

      // CREATE: Allow if authenticated, the incoming data sets the user as owner,
      // and the incoming data includes the user in the memberIds array.
      allow create: if isAuthenticated()
                    && request.resource.data.members[requesterUid()] == 'owner'
                    && requesterUid() in request.resource.data.memberIds;

      // UPDATE: 
      // Fetch the existing document data first.
      // Allow if the user is a member of the existing doc AND
      //   EITHER the user is the owner (can change anything) 
      //   OR the user is an editor/owner AND they are NOT changing the members map or memberIds array.
      allow update: let existingData = getChecklistData();
                    let incomingData = request.resource.data;
                    in if isMemberFromData(existingData) && (
                       isOwnerFromData(existingData) || 
                       ( 
                         isEditorOrOwnerFromData(existingData) &&
                         incomingData.members == existingData.members &&
                         incomingData.memberIds == existingData.memberIds
                       )
                     );

      // DELETE: Allow only if the owner of the existing document data.
      allow delete: if isOwnerFromData(getChecklistData());
    }
    
     // Match the specific structure used by the application for user data
    match /artifacts/{appId}/users/{userId} {
      // Allow any authenticated user to read user profiles.
      allow get: if isAuthenticated();

      // Allow authenticated users to create or update their OWN user document.
      // This is crucial for the setDoc call in setupAuthListener.
      allow write: if isAuthenticated() && requesterUid() == userId;
      
      // Disallow listing all users or deleting user documents from the client.
      allow list, delete: if false;
    }

     // Default deny for any other paths not explicitly matched
     match /{document=**} {
       allow read, write: if false;
     }
  }
}

