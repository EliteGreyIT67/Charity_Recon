rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    function requesterUid() {
      return request.auth.uid;
    }
    function isOwner(doc) {
      // Check if the members map exists and if the requester has the 'owner' role
      return exists(/databases/$(database)/documents/checklists/$(doc.id)) && resource.data.members[requesterUid()] == 'owner';
    }
     function isEditor(doc) {
      // Check if the members map exists and if the requester has the 'editor' role
      return exists(/databases/$(database)/documents/checklists/$(doc.id)) && resource.data.members[requesterUid()] == 'editor';
    }
    function isMemberRole(docId) {
       // Check if the document exists and if the requester is listed in the members map with any valid role.
      let docData = get(/databases/$(database)/documents/checklists/$(docId)).data;
      return docData.members[requesterUid()] in ['owner', 'editor', 'viewer'];
    }

    // Checklists collection
    match /checklists/{checklistId} {
      // Allow reading a single checklist if the user is a member (owner, editor, viewer).
      // Use the helper function `isMemberRole` which correctly fetches the document data.
      allow get: if isAuthenticated() && isMemberRole(checklistId);

      // Allow a user to list only the checklists they are a member of.
      // This rule enforces that any 'list' query on the 'checklists' collection
      // MUST include a `where('memberIds', 'array-contains', USER_ID)` clause.
      allow list: if isAuthenticated()
                  // Ensure there's exactly one 'where' clause
                  && request.query.where.size() == 1
                  // Ensure the clause is specifically 'memberIds' 'array-contains' USER_ID
                  && request.query.where[0].fieldPath == 'memberIds'
                  && request.query.where[0].op == 'array-contains'
                  && request.query.where[0].value == requesterUid();

      // Allow creation if the user is authenticated and includes themselves as an owner
      // and also includes the required 'memberIds' array containing their UID.
      allow create: if isAuthenticated()
                    && request.resource.data.members[requesterUid()] == 'owner'
                    && requesterUid() in request.resource.data.memberIds;

      // Allow updates if the user is an owner or editor.
      // Crucially, only owners can modify the 'members' map or 'memberIds' array.
      allow update: if isAuthenticated() && isMemberRole(checklistId) && (
                      // Owners can update anything.
                      isOwner(resource) ||
                      // Editors can update only if they are NOT changing members/memberIds.
                      (isEditor(resource) && request.resource.data.members == resource.data.members && request.resource.data.memberIds == resource.data.memberIds)
                    );

      // Only the owner can delete a checklist.
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    // Users collection: Allow users to update their own document,
    // for example to set a 'lastSeen' timestamp. Also allow reads by authenticated users.
    match /users/{userId} {
      allow get: if isAuthenticated();
      allow list: if false; // Do not allow listing all users.
      allow create, update: if isAuthenticated() && requesterUid() == userId;
      allow delete: if false; // Users cannot delete their own user doc.
    }
  }
}
