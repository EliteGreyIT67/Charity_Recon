rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    function requesterUid() {
      return request.auth.uid;
    }
    
    // Checks membership on the existing document (resource.data)
    function isMember(doc) {
      return doc.data != null && 'members' in doc.data && requesterUid() in doc.data.members;
    }
    
    // Checks if the user is the owner on the existing document
    function isOwner(doc) {
      return isMember(doc) && doc.data.members[requesterUid()] == 'owner';
    }
    
    // Checks if the user is an owner or editor on the existing document
    function isEditorOrOwner(doc) {
      return isMember(doc) && (doc.data.members[requesterUid()] in ['owner', 'editor']);
    }
    
    // --- Application Collections under Artifacts Path ---

    // Checklist Collection Match
    match /artifacts/{appId}/checklists/{checklistId} {
      
      // READ (Single Doc): Allow if the authenticated user is a member (owner/editor/viewer)
      allow get: if isAuthenticated() && isMember(resource);

      // LIST (Query): Allow only if authenticated AND the query correctly filters by 
      // the user's ID in the 'memberIds' array. This enforces the required index usage.
      allow list: if isAuthenticated()
                  && request.query.where.size() == 1
                  && request.query.where[0].fieldPath == 'memberIds'
                  && request.query.where[0].op == 'array-contains'
                  && request.query.where[0].value == requesterUid();

      // CREATE: Allow if authenticated AND the user includes themselves in the incoming data
      // as the 'owner' in the 'members' map and in the 'memberIds' array.
      allow create: if isAuthenticated()
                    && request.resource.data.members[requesterUid()] == 'owner'
                    && requesterUid() in request.resource.data.memberIds;

      // UPDATE: Allow if authenticated, and either:
      // 1. The user is the owner (can change everything, including membership)
      // 2. The user is an owner/editor AND they are NOT attempting to change membership fields
      allow update: if isAuthenticated() && isMember(resource) && (
        isOwner(resource) || 
        (
          isEditorOrOwner(resource) &&
          // Enforce no change to security-sensitive fields for editors
          request.resource.data.members == resource.data.members &&
          request.resource.data.memberIds == resource.data.memberIds
        )
      );

      // DELETE: Allow only if the user is the owner of the document.
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Users Collection Match (for storing user profiles used in sharing)
    match /artifacts/{appId}/users/{userId} {
      // Allow any authenticated user to read user profiles for sharing purposes.
      allow get: if isAuthenticated();
      
      // Allow authenticated users to create or update only their OWN user document.
      allow write: if isAuthenticated() && requesterUid() == userId;

      // Disallow listing all users or deleting user documents from the client.
      allow list, delete: if false;
    }

    // Default deny for any other paths not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}