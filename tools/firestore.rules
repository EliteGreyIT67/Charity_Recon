rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper: Is the user signed in?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper: Get the UID of the user making the request.
    function requesterUid() {
      // Must be authenticated to use this function
      return request.auth.uid;
    }

    // Match the specific structure used by the application
    match /artifacts/{appId}/checklists/{checklistId} {
      
      // Check if the user is a member of the existing document (resource.data)
      function isMember() {
         // resource.data exists on get, update, delete
         return isAuthenticated() && resource.data.members[requesterUid()] != null;
      }
      
      // Check if the user is the owner of the existing document (resource.data)
      function isOwner() {
        return isMember() && resource.data.members[requesterUid()] == 'owner';
      }
      
      // Check if the user is an owner or editor of the existing document (resource.data)
      function isEditorOrOwner() {
         return isMember() && (resource.data.members[requesterUid()] == 'owner' || resource.data.members[requesterUid()] == 'editor');
      }

      // READ (get): Allow if the user is authenticated and is a member of the existing document.
      allow get: if isMember();

      // LIST (query): Allow only if the query specifically filters by the requester's UID in 'memberIds'.
      // NOTE: This rule requires an array index on the 'memberIds' field.
      allow list: if isAuthenticated()
                  && request.query.where.size() == 1
                  && request.query.where[0].fieldPath == 'memberIds'
                  && request.query.where[0].op == 'array-contains'
                  && request.query.where[0].value == requesterUid();

      // CREATE: Allow if authenticated, and the incoming data sets the requester as 'owner' 
      // and they are the ONLY member listed in memberIds.
      allow create: if isAuthenticated()
                    && request.resource.data.members[requesterUid()] == 'owner'
                    && request.resource.data.memberIds.hasAll([requesterUid()])
                    && request.resource.data.memberIds.size() == 1;

      // --- UPDATED RULE (Fixes Save Error) ---
      // Allow update if:
      // 1. The user is the Owner (can change anything)
      // 2. The user is an Editor AND the membership fields are not being changed.
      //    We check for set equality (ignoring order) on memberIds.
      allow update: if isOwner()
                    || ( 
                         isEditorOrOwner()
                         && request.resource.data.members == resource.data.members // Map comparison
                         // Check that the arrays contain the same items, regardless of order
                         && request.resource.data.memberIds.hasAll(resource.data.memberIds)
                         && resource.data.memberIds.hasAll(request.resource.data.memberIds)
                       );

      // DELETE: Allow only if the user is the owner of the existing document.
      allow delete: if isOwner();
    }

     // Match the specific structure used by the application for user data
    match /artifacts/{appId}/users/{userId} {
      // Allow any authenticated user to read user profiles (needed for sharing/display name lookup).
      allow get: if isAuthenticated();

      // Allow authenticated users to create or update their OWN user document.
      allow write: if isAuthenticated() && requesterUid() == userId;

      // Disallow listing all users or deleting user documents from the client.
      allow list, delete: if false;
    }

     // Default deny for any other paths not explicitly matched
     match /{document=**} {
       allow read, write: if false;
     }
  }
}
